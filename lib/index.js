// Generated by CoffeeScript 1.6.3
var NgAnnotateUglifyMinifier, clone, ngAnnotate, sysPath, uglify,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

sysPath = require('path');

uglify = require('uglify-js');

ngAnnotate = require('ng-annotate');

clone = function(obj) {
  var copied, key, val;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  copied = new obj.constructor();
  for (key in obj) {
    val = obj[key];
    copied[key] = clone(val);
  }
  return copied;
};

module.exports = NgAnnotateUglifyMinifier = (function() {
  NgAnnotateUglifyMinifier.prototype.brunchPlugin = true;

  NgAnnotateUglifyMinifier.prototype.type = 'javascript';

  function NgAnnotateUglifyMinifier(config) {
    var _ref, _ref1, _ref2;
    this.config = config;
    this.optimize = __bind(this.optimize, this);
    this.options = (clone((_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? _ref1.uglify : void 0 : void 0)) || {};
    this.options.fromString = true;
    this.options.sourceMaps = (_ref2 = this.config) != null ? _ref2.sourceMaps : void 0;
  }

  NgAnnotateUglifyMinifier.prototype.optimize = function(data, path, callback) {
    var annotated, err, error, optimized, options, result;
    options = this.options;
    options.outSourceMap = options.sourceMaps ? "" + path + ".map" : void 0;
    try {
      annotated = ngAnnotate(data, {
        add: true
      }).src;
      return optimized = uglify.minify(annotated, options);
    } catch (_error) {
      err = _error;
      return error = "ng-annotate or JS minify failed on " + path + ": " + err;
    } finally {
      result = optimized && options.sourceMaps ? {
        data: optimized.code,
        map: optimized.map
      } : {
        data: optimized.code
      };
      callback(error, result || data);
    }
  };

  return NgAnnotateUglifyMinifier;

})();
